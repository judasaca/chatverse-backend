generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  state                UserState
  username             String                 @unique
  email                String                 @unique
  password             String
  ProfileImage         ProfileImage?
  friendshipId         String?                @db.ObjectId
  roomsIds             String[]               @db.ObjectId
  rooms                Room[]                 @relation(references: [id], fields: [roomsIds])
  sentMessages         DirectMessage[]        @relation(name: "sentMessages")
  receivedMessages     DirectMessage[]        @relation(name: "receivedMessages")
  sentRoomMessages     RoomMessage[]          @relation()
  sendedInvitations    FriendshipInvitation[] @relation(name: "sendedInvitations")
  receivedInviitations FriendshipInvitation[] @relation(name: "receivedInvitations")
}

enum UserState {
  ONLINE
  INACTIVE
  DISCONNECTED
}

model ProfileImage {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [username], references: [username])
  username String @unique
  image    Bytes
}

model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userName1 String
  userName2 String
  createdAt DateTime @default(now())

  @@unique([userName1, userName2])
  @@unique([userName2, userName1])
}

model Room {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String        @unique
  admins    String[]
  usersIds  String[]      @db.ObjectId
  users     User[]        @relation(fields: [usersIds], references: [id])
  createdAt DateTime      @default(now())
  messages  RoomMessage[] @relation()
}

model DirectMessage {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  message          String
  senderUsername   String
  sender           User     @relation(fields: [senderUsername], references: [username], name: "sentMessages")
  receiverUsername String
  receiver         User     @relation(fields: [receiverUsername], references: [username], name: "receivedMessages")
  createdAt        DateTime @default(now())
}

model RoomMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  roomName   String
  room       Room     @relation(fields: [roomName], references: [name])
  senderName String
  sender     User     @relation(fields: [senderName], references: [username])
  createdAt  DateTime @default(now())
}

model FriendshipInvitation {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  senderUsername   String
  sender           User   @relation(fields: [senderUsername], references: [username], name: "sendedInvitations")
  receiverUsername String
  receiver         User   @relation(fields: [receiverUsername], references: [username], name: "receivedInvitations")
}
